plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'org.jetbrains.kotlin.jvm' version '1.9.0'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$project.fabric_loader_version"
    modApi "net.fabricmc.fabric-api:fabric-api:$project.fabric_api_version+$project.minecraft_version"

    include(modApi "me.lucko:fabric-permissions-api:$project.fabric_permissions_api_version")
    modCompileOnly "com.cobblemon:fabric:$project.cobblemon_version+$project.minecraft_version"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

    compileOnly "org.projectlombok:lombok:$project.lombok_version"
    annotationProcessor "org.projectlombok:lombok:$project.lombok_version"
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        create("mavenJava", MavenPublication) {
            from components.java

            groupId = rootProject.group
            artifactId = rootProject.archives_base_name + "-" + project.name
            version = rootProject.version
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
        maven {
            name = 's3'
            url = "s3://selfdot-maven/maven-repo"

            credentials(AwsCredentials) {
                accessKey = findProperty("aws.accessKey") ?: System.getenv("AWS_ACCESS_KEY_ID")
                secretKey = findProperty("aws.secretKey") ?: System.getenv("AWS_SECRET_ACCESS_KEY")
            }
        }
    }
}
